{"ast":null,"code":"export function getMergeSortAnimations(array) {\n  const animations = [];\n  if (array.length <= 1) return array;\n  const auxiliaryArray = array.slice();\n  mergeSortHelper(array, 0, array.length - 1, auxiliaryArray, animations);\n  return animations;\n}\n\nfunction mergeSortHelper(mainArray, startIdx, endIdx, auxiliaryArray, animations) {\n  if (startIdx === endIdx) return;\n  const middleIdx = Math.floor((startIdx + endIdx) / 2);\n  mergeSortHelper(auxiliaryArray, startIdx, middleIdx, mainArray, animations);\n  mergeSortHelper(auxiliaryArray, middleIdx + 1, endIdx, mainArray, animations);\n  doMerge(mainArray, startIdx, middleIdx, endIdx, auxiliaryArray, animations);\n}\n\nfunction doMerge(mainArray, startIdx, middleIdx, endIdx, auxiliaryArray, animations) {\n  let k = startIdx;\n  let i = startIdx;\n  let j = middleIdx + 1;\n\n  while (i <= middleIdx && j <= endIdx) {\n    // These are the values that we're comparing; we push them once\n    // to change their color.\n    animations.push([i, j]); // These are the values that we're comparing; we push them a second\n    // time to revert their color.\n\n    animations.push([i, j]);\n\n    if (auxiliaryArray[i] <= auxiliaryArray[j]) {\n      // We overwrite the value at index k in the original array with the\n      // value at index i in the auxiliary array.\n      animations.push([k, auxiliaryArray[i]]);\n      mainArray[k++] = auxiliaryArray[i++];\n    } else {\n      // We overwrite the value at index k in the original array with the\n      // value at index j in the auxiliary array.\n      animations.push([k, auxiliaryArray[j]]);\n      mainArray[k++] = auxiliaryArray[j++];\n    }\n  }\n\n  while (i <= middleIdx) {\n    // These are the values that we're comparing; we push them once\n    // to change their color.\n    animations.push([i, i]); // These are the values that we're comparing; we push them a second\n    // time to revert their color.\n\n    animations.push([i, i]); // We overwrite the value at index k in the original array with the\n    // value at index i in the auxiliary array.\n\n    animations.push([k, auxiliaryArray[i]]);\n    mainArray[k++] = auxiliaryArray[i++];\n  }\n\n  while (j <= endIdx) {\n    // These are the values that we're comparing; we push them once\n    // to change their color.\n    animations.push([j, j]); // These are the values that we're comparing; we push them a second\n    // time to revert their color.\n\n    animations.push([j, j]); // We overwrite the value at index k in the original array with the\n    // value at index j in the auxiliary array.\n\n    animations.push([k, auxiliaryArray[j]]);\n    mainArray[k++] = auxiliaryArray[j++];\n  }\n}\n\nexport function Bubble() {\n  c_delay = 0;\n\n  for (var i = 0; i < array_size - 1; i++) {\n    for (var j = 0; j < array_size - i - 1; j++) {\n      div_update(divs[j], div_sizes[j], \"yellow\"); //Color update\n\n      if (div_sizes[j] > div_sizes[j + 1]) {\n        div_update(divs[j], div_sizes[j], \"red\"); //Color update\n\n        div_update(divs[j + 1], div_sizes[j + 1], \"red\"); //Color update\n\n        var temp = div_sizes[j];\n        div_sizes[j] = div_sizes[j + 1];\n        div_sizes[j + 1] = temp;\n        div_update(divs[j], div_sizes[j], \"red\"); //Height update\n\n        div_update(divs[j + 1], div_sizes[j + 1], \"red\"); //Height update\n      }\n\n      div_update(divs[j], div_sizes[j], \"blue\"); //Color updat\n    }\n\n    div_update(divs[j], div_sizes[j], \"green\"); //Color update\n  }\n\n  div_update(divs[0], div_sizes[0], \"green\"); //Color update\n\n  enable_buttons();\n} // export const mergeSort = (array, animation = []) => {\n//     if (array.length === 1) return array;\n//     const midIdx = Math.floor(array.length / 2);\n//     const firstHalf = mergeSort(array.slice(0, midIdx));\n//     const secondHalf = mergeSort(array.slice(midIdx));\n//     const sortedArray = [];\n//     let i = 0, j = 0;\n//     while (i < firstHalf.length && j < secondHalf.length) {\n//         if (firstHalf[i] < secondHalf[j]) {\n//             sortedArray.push(firstHalf[i++]);\n//         } else {\n//             sortedArray.push(secondHalf[j++]);\n//         }\n//     }\n//     while (i < firstHalf.length)\n//         sortedArray.push(firstHalf[i++]);\n//     while (j < secondHalf.length)\n//         sortedArray.push(secondHalf[j++]);\n//     return sortedArray;\n// };\n\n_c = Bubble;\n\nvar _c;\n\n$RefreshReg$(_c, \"Bubble\");","map":{"version":3,"sources":["C:/Users/dell/Documents/reactproject/src/sortAlgos.js"],"names":["getMergeSortAnimations","array","animations","length","auxiliaryArray","slice","mergeSortHelper","mainArray","startIdx","endIdx","middleIdx","Math","floor","doMerge","k","i","j","push","Bubble","c_delay","array_size","div_update","divs","div_sizes","temp","enable_buttons"],"mappings":"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","sourcesContent":["export function getMergeSortAnimations(array) {\r\n    const animations = [];\r\n    if (array.length <= 1) return array;\r\n    const auxiliaryArray = array.slice();\r\n    mergeSortHelper(array, 0, array.length - 1, auxiliaryArray, animations);\r\n    return animations;\r\n  }\r\n  \r\n  function mergeSortHelper(\r\n    mainArray,\r\n    startIdx,\r\n    endIdx,\r\n    auxiliaryArray,\r\n    animations,\r\n  ) {\r\n    if (startIdx === endIdx) return;\r\n    const middleIdx = Math.floor((startIdx + endIdx) / 2);\r\n    mergeSortHelper(auxiliaryArray, startIdx, middleIdx, mainArray, animations);\r\n    mergeSortHelper(auxiliaryArray, middleIdx + 1, endIdx, mainArray, animations);\r\n    doMerge(mainArray, startIdx, middleIdx, endIdx, auxiliaryArray, animations);\r\n  }\r\n  \r\n  function doMerge(\r\n    mainArray,\r\n    startIdx,\r\n    middleIdx,\r\n    endIdx,\r\n    auxiliaryArray,\r\n    animations,\r\n  ) {\r\n    let k = startIdx;\r\n    let i = startIdx;\r\n    let j = middleIdx + 1;\r\n    while (i <= middleIdx && j <= endIdx) {\r\n      // These are the values that we're comparing; we push them once\r\n      // to change their color.\r\n      animations.push([i, j]);\r\n      // These are the values that we're comparing; we push them a second\r\n      // time to revert their color.\r\n      animations.push([i, j]);\r\n      if (auxiliaryArray[i] <= auxiliaryArray[j]) {\r\n        // We overwrite the value at index k in the original array with the\r\n        // value at index i in the auxiliary array.\r\n        animations.push([k, auxiliaryArray[i]]);\r\n        mainArray[k++] = auxiliaryArray[i++];\r\n      } else {\r\n        // We overwrite the value at index k in the original array with the\r\n        // value at index j in the auxiliary array.\r\n        animations.push([k, auxiliaryArray[j]]);\r\n        mainArray[k++] = auxiliaryArray[j++];\r\n      }\r\n    }\r\n    while (i <= middleIdx) {\r\n      // These are the values that we're comparing; we push them once\r\n      // to change their color.\r\n      animations.push([i, i]);\r\n      // These are the values that we're comparing; we push them a second\r\n      // time to revert their color.\r\n      animations.push([i, i]);\r\n      // We overwrite the value at index k in the original array with the\r\n      // value at index i in the auxiliary array.\r\n      animations.push([k, auxiliaryArray[i]]);\r\n      mainArray[k++] = auxiliaryArray[i++];\r\n    }\r\n    while (j <= endIdx) {\r\n      // These are the values that we're comparing; we push them once\r\n      // to change their color.\r\n      animations.push([j, j]);\r\n      // These are the values that we're comparing; we push them a second\r\n      // time to revert their color.\r\n      animations.push([j, j]);\r\n      // We overwrite the value at index k in the original array with the\r\n      // value at index j in the auxiliary array.\r\n      animations.push([k, auxiliaryArray[j]]);\r\n      mainArray[k++] = auxiliaryArray[j++];\r\n    }\r\n  }\r\n\r\n\r\n export  function Bubble()\r\n  {\r\n      c_delay=0;\r\n  \r\n      for(var i=0;i<array_size-1;i++)\r\n      {\r\n          for(var j=0;j<array_size-i-1;j++)\r\n          {\r\n              div_update(divs[j],div_sizes[j],\"yellow\");//Color update\r\n  \r\n              if(div_sizes[j]>div_sizes[j+1])\r\n              {\r\n                  div_update(divs[j],div_sizes[j], \"red\");//Color update\r\n                  div_update(divs[j+1],div_sizes[j+1], \"red\");//Color update\r\n  \r\n                  var temp=div_sizes[j];\r\n                  div_sizes[j]=div_sizes[j+1];\r\n                  div_sizes[j+1]=temp;\r\n  \r\n                  div_update(divs[j],div_sizes[j], \"red\");//Height update\r\n                  div_update(divs[j+1],div_sizes[j+1], \"red\");//Height update\r\n              }\r\n              div_update(divs[j],div_sizes[j], \"blue\");//Color updat\r\n          }\r\n          div_update(divs[j],div_sizes[j], \"green\");//Color update\r\n      }\r\n      div_update(divs[0],div_sizes[0], \"green\");//Color update\r\n  \r\n      enable_buttons();\r\n  }\r\n  \r\n \r\n// export const mergeSort = (array, animation = []) => {\r\n    \r\n//     if (array.length === 1) return array;\r\n//     const midIdx = Math.floor(array.length / 2);\r\n//     const firstHalf = mergeSort(array.slice(0, midIdx));\r\n//     const secondHalf = mergeSort(array.slice(midIdx));\r\n//     const sortedArray = [];\r\n//     let i = 0, j = 0;\r\n//     while (i < firstHalf.length && j < secondHalf.length) {\r\n//         if (firstHalf[i] < secondHalf[j]) {\r\n//             sortedArray.push(firstHalf[i++]);\r\n//         } else {\r\n//             sortedArray.push(secondHalf[j++]);\r\n//         }\r\n//     }\r\n//     while (i < firstHalf.length)\r\n//         sortedArray.push(firstHalf[i++]);\r\n//     while (j < secondHalf.length)\r\n//         sortedArray.push(secondHalf[j++]);\r\n//     return sortedArray;\r\n// };"]},"metadata":{},"sourceType":"module"}