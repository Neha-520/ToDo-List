{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\dell\\\\Documents\\\\reactproject\\\\src\\\\Sorting.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from 'react';\nimport './Sorting.css';\nimport { getMergeSortAnimations } from './sortAlgos.js'; // Change this value for the speed of the animations.\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst ANIMATION_SPEED_MS = 1; // Change this value for the number of bars (value) in the array.\n\nconst NUMBER_OF_ARRAY_BARS = 300; // This is the main color of the array bars.\n\nconst PRIMARY_COLOR = 'rgb(236, 149, 164)'; // This is the color of array bars that are being compared throughout the animations.\n\nconst SECONDARY_COLOR = 'black'; // NOTE: This method will only work if your sorting algorithms actually return\n// the sorted arrays; if they return the animations (as they currently do), then\n// this method will be broken.\n\nconst Sorting = props => {\n  _s();\n\n  const [array1, setArray1] = useState([]);\n\n  const resetArray = () => {\n    const a = [];\n\n    for (let i = 0; i < NUMBER_OF_ARRAY_BARS; i++) {\n      a.push(RandomInt(5, 720));\n    }\n\n    setArray1(a);\n  };\n\n  const mergeSort = () => {\n    const animations = getMergeSortAnimations(array1);\n\n    for (let i = 0; i < animations.length; i++) {\n      const arrayBars = document.getElementsByClassName('arrayBar');\n      const isColorChange = i % 3 !== 2;\n\n      if (isColorChange) {\n        const [barOneIdx, barTwoIdx] = animations[i];\n        const barOneStyle = arrayBars[barOneIdx].style;\n        const barTwoStyle = arrayBars[barTwoIdx].style;\n        const color = i % 3 === 0 ? SECONDARY_COLOR : PRIMARY_COLOR;\n        setTimeout(() => {\n          barOneStyle.backgroundColor = color;\n          barTwoStyle.backgroundColor = color;\n        }, i * ANIMATION_SPEED_MS);\n      } else {\n        setTimeout(() => {\n          const [barOneIdx, newHeight] = animations[i];\n          const barOneStyle = arrayBars[barOneIdx].style;\n          barOneStyle.height = `${newHeight}px`;\n        }, i * ANIMATION_SPEED_MS);\n      }\n    }\n  }; // const testSortingAlgorithms = () => {\n  //   for (let i = 0; i < 100; i++) {\n  //     const ar = [];\n  //     const length = RandomInt(1, 1000);\n  //     for (let i = 0; i < length; i++) {\n  //       ar.push(RandomInt(-1000, 1000));\n  //     }\n  //     const javaScriptSortedArray = ar.slice().sort((a, b) => a - b);\n  //     const mergeSortedArray = getMergeSortAnimations(ar.slice());\n  //     console.log(arraysAreEqual(javaScriptSortedArray, mergeSortedArray));\n  //   }\n  // }\n  // function arraysAreEqual(arrayOne, arrayTwo) {\n  //   if (arrayOne.length !== arrayTwo.length) return false;\n  //   for (let i = 0; i < arrayOne.length; i++) {\n  //     if (arrayOne[i] !== arrayTwo[i]) {\n  //       return false;\n  //     }\n  //   }\n  //   return true;\n  // }\n\n\n  useEffect(() => {\n    resetArray();\n  }, []);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"array-container\",\n      children: [array1.map((value, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"arrayBar\",\n        style: {\n          height: `${value}px`\n        }\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 87,\n        columnNumber: 13\n      }, this)), /*#__PURE__*/_jsxDEV(\"center\", {\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"btn btn-lg btn-dark m-3\",\n          onClick: resetArray,\n          children: \"Reset Array\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 95,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"btn btn-lg btn-dark m-3\",\n          onClick: mergeSort,\n          children: \"Merge Sort\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 96,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"btn btn-lg btn-dark m-3\",\n          onClick: mergeSort,\n          children: \"Bubble Sort\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 97,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 94,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 7\n    }, this)\n  }, void 0, false);\n};\n\n_s(Sorting, \"yxsa9eEDCbEi/8eAEdRADpPUUNI=\");\n\n_c = Sorting;\n\nfunction RandomInt(min, max) {\n  return Math.floor(Math.random() * (max - min + 1) + min);\n}\n\n_c2 = RandomInt;\nexport default Sorting;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"Sorting\");\n$RefreshReg$(_c2, \"RandomInt\");","map":{"version":3,"sources":["C:/Users/dell/Documents/reactproject/src/Sorting.jsx"],"names":["React","useState","useEffect","getMergeSortAnimations","ANIMATION_SPEED_MS","NUMBER_OF_ARRAY_BARS","PRIMARY_COLOR","SECONDARY_COLOR","Sorting","props","array1","setArray1","resetArray","a","i","push","RandomInt","mergeSort","animations","length","arrayBars","document","getElementsByClassName","isColorChange","barOneIdx","barTwoIdx","barOneStyle","style","barTwoStyle","color","setTimeout","backgroundColor","newHeight","height","map","value","index","min","max","Math","floor","random"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport './Sorting.css';\r\nimport {getMergeSortAnimations} from './sortAlgos.js'\r\n\r\n// Change this value for the speed of the animations.\r\nconst ANIMATION_SPEED_MS = 1;\r\n\r\n// Change this value for the number of bars (value) in the array.\r\nconst NUMBER_OF_ARRAY_BARS = 300;\r\n\r\n// This is the main color of the array bars.\r\nconst PRIMARY_COLOR = 'rgb(236, 149, 164)';\r\n\r\n// This is the color of array bars that are being compared throughout the animations.\r\nconst SECONDARY_COLOR = 'black';\r\n\r\n// NOTE: This method will only work if your sorting algorithms actually return\r\n// the sorted arrays; if they return the animations (as they currently do), then\r\n// this method will be broken.\r\n\r\nconst Sorting = (props) => {\r\n\r\n  const [array1, setArray1] = useState([]);\r\n  \r\n  const resetArray = () => {\r\n    const a = [];\r\n    for (let i = 0; i < NUMBER_OF_ARRAY_BARS; i++) {\r\n      a.push(RandomInt(5, 720));\r\n    }\r\n    setArray1(a);\r\n  }\r\n\r\n  const mergeSort = () => {\r\n    const animations = getMergeSortAnimations(array1);\r\n    for (let i = 0; i < animations.length; i++) {\r\n      const arrayBars = document.getElementsByClassName('arrayBar');\r\n      const isColorChange = i % 3 !== 2;\r\n      if (isColorChange) {\r\n        const [barOneIdx, barTwoIdx] = animations[i];\r\n        const barOneStyle = arrayBars[barOneIdx].style;\r\n        const barTwoStyle = arrayBars[barTwoIdx].style;\r\n        const color = i % 3 === 0 ? SECONDARY_COLOR : PRIMARY_COLOR;\r\n        setTimeout(() => {\r\n          barOneStyle.backgroundColor = color;\r\n          barTwoStyle.backgroundColor = color;\r\n        }, i * ANIMATION_SPEED_MS);\r\n      } else {\r\n        setTimeout(() => {\r\n          const [barOneIdx, newHeight] = animations[i];\r\n          const barOneStyle = arrayBars[barOneIdx].style;\r\n          barOneStyle.height = `${newHeight}px`;\r\n        }, i * ANIMATION_SPEED_MS);\r\n      }\r\n    }\r\n  }\r\n  // const testSortingAlgorithms = () => {\r\n  //   for (let i = 0; i < 100; i++) {\r\n  //     const ar = [];\r\n  //     const length = RandomInt(1, 1000);\r\n  //     for (let i = 0; i < length; i++) {\r\n  //       ar.push(RandomInt(-1000, 1000));\r\n  //     }\r\n  //     const javaScriptSortedArray = ar.slice().sort((a, b) => a - b);\r\n  //     const mergeSortedArray = getMergeSortAnimations(ar.slice());\r\n  //     console.log(arraysAreEqual(javaScriptSortedArray, mergeSortedArray));\r\n  //   }\r\n  // }\r\n  // function arraysAreEqual(arrayOne, arrayTwo) {\r\n  //   if (arrayOne.length !== arrayTwo.length) return false;\r\n  //   for (let i = 0; i < arrayOne.length; i++) {\r\n  //     if (arrayOne[i] !== arrayTwo[i]) {\r\n  //       return false;\r\n  //     }\r\n  //   }\r\n  //   return true;\r\n  // }\r\n\r\n  useEffect(() => {\r\n    resetArray();\r\n  }, []);\r\n\r\n  return (\r\n    <>\r\n      <div className=\"array-container\">\r\n        {\r\n          array1.map((value, index) => (\r\n            <div className=\"arrayBar\"\r\n              key={index}\r\n              style={{ height: `${value}px` }}\r\n            >\r\n            </div>\r\n          ))\r\n        }\r\n        <center>\r\n          <button className=\"btn btn-lg btn-dark m-3\" onClick={resetArray}>Reset Array</button>\r\n          <button className=\"btn btn-lg btn-dark m-3\" onClick={mergeSort}>Merge Sort</button>\r\n          <button className=\"btn btn-lg btn-dark m-3\" onClick={mergeSort}>Bubble Sort</button>\r\n          \r\n        </center>\r\n      </div>\r\n    </>\r\n  );\r\n}\r\nfunction RandomInt(min, max) {\r\n  return Math.floor(Math.random() * (max - min + 1) + min);\r\n}\r\n\r\nexport default Sorting;"]},"metadata":{},"sourceType":"module"}