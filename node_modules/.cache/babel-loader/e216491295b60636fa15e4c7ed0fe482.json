{"ast":null,"code":"export const mergeSort = array => {\n  if (array.length === 1) return array;\n  const midIdx = Math.floor(array.ength / 2);\n  const firstHalf = mergeSort(array.slice(0, midIdx));\n  const secondHalf = mergeSort(array.slice(midIdx));\n  const sortedArray = [];\n  let i = 0,\n      j = 0;\n\n  while (i < firstHalf.length && j < secondHalf.length) {\n    if (firstHalf[i] < secondHalf[j]) {\n      sortedArray.push(firstHalf[i++]);\n    } else {\n      sortedArray.push(secondHalf[j++]);\n    }\n  }\n\n  while (i < firstHalf.length) sortedArray.push(firstHalf[i++]);\n\n  while (j < secondHalf.length) sortedArray.push(secondHalf[j++]);\n\n  return sortedArray;\n};","map":{"version":3,"sources":["C:/Users/dell/Documents/reactproject/src/sortAlgos.js"],"names":["mergeSort","array","length","midIdx","Math","floor","ength","firstHalf","slice","secondHalf","sortedArray","i","j","push"],"mappings":"AAAA,OAAO,MAAMA,SAAS,GAAEC,KAAD,IAAS;AAC9B,MAAGA,KAAK,CAACC,MAAN,KAAiB,CAApB,EAAuB,OAAOD,KAAP;AACvB,QAAME,MAAM,GAAGC,IAAI,CAACC,KAAL,CAAWJ,KAAK,CAACK,KAAN,GAAY,CAAvB,CAAf;AACA,QAAMC,SAAS,GAAGP,SAAS,CAAEC,KAAK,CAACO,KAAN,CAAY,CAAZ,EAAcL,MAAd,CAAF,CAA3B;AACA,QAAMM,UAAU,GAAGT,SAAS,CAACC,KAAK,CAACO,KAAN,CAAYL,MAAZ,CAAD,CAA5B;AACA,QAAMO,WAAW,GAAG,EAApB;AACA,MAAIC,CAAC,GAAC,CAAN;AAAA,MAAQC,CAAC,GAAC,CAAV;;AACA,SAAMD,CAAC,GAACJ,SAAS,CAACL,MAAZ,IAAsBU,CAAC,GAACH,UAAU,CAACP,MAAzC,EAAgD;AAC5C,QAAGK,SAAS,CAACI,CAAD,CAAT,GAAaF,UAAU,CAACG,CAAD,CAA1B,EAA8B;AAC1BF,MAAAA,WAAW,CAACG,IAAZ,CAAiBN,SAAS,CAACI,CAAC,EAAF,CAA1B;AACH,KAFD,MAEK;AACDD,MAAAA,WAAW,CAACG,IAAZ,CAAiBJ,UAAU,CAACG,CAAC,EAAF,CAA3B;AACH;AACJ;;AACD,SAAOD,CAAC,GAACJ,SAAS,CAACL,MAAnB,EACEQ,WAAW,CAACG,IAAZ,CAAiBN,SAAS,CAACI,CAAC,EAAF,CAA1B;;AACA,SAAMC,CAAC,GAACH,UAAU,CAACP,MAAnB,EACAQ,WAAW,CAACG,IAAZ,CAAiBJ,UAAU,CAACG,CAAC,EAAF,CAA3B;;AACJ,SAAOF,WAAP;AACC,CAnBM","sourcesContent":["export const mergeSort=(array)=>{\r\n  if(array.length === 1) return array;\r\n  const midIdx = Math.floor(array.ength/2);\r\n  const firstHalf = mergeSort (array.slice(0,midIdx));\r\n  const secondHalf = mergeSort(array.slice(midIdx));\r\n  const sortedArray = [];\r\n  let i=0,j=0;\r\n  while(i<firstHalf.length && j<secondHalf.length){\r\n      if(firstHalf[i]<secondHalf[j]){\r\n          sortedArray.push(firstHalf[i++]);\r\n      }else{\r\n          sortedArray.push(secondHalf[j++]);\r\n      }\r\n  }\r\n  while (i<firstHalf.length) \r\n    sortedArray.push(firstHalf[i++]);\r\n    while(j<secondHalf.length)\r\n    sortedArray.push(secondHalf[j++]);\r\nreturn sortedArray;\r\n};"]},"metadata":{},"sourceType":"module"}